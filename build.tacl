== ------------------------------------------------------------------
== file: build.tacl
== type: TACL for Guardian software build using GNU Make
== project: awkmake
== ------------------------------------------------------------------


?SECTION define_everything MACRO
== ------------------------------------------------------------------
== Comments go here
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

define_flags
define_texts
map_source_to_guardian180
map_guardian180_to_guardian101
define_targets
define_resources
define_defines
define_assigns
define_params
define_gs100obj_hello_rule
define_gs100exe_hello_rule


?SECTION define_flags MACRO
== ------------------------------------------------------------------
== Reserved for future use
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

[#DEF :flags STRUCT
  BEGIN
    BOOL false VALUE 0;
    BOOL true  VALUE -1;
  END;
]


?SECTION define_texts MACRO
== ------------------------------------------------------------------
== Comments go here
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

[#DEF :tal_directives TEXT |BODY|OPTIMIZE 0] == Let OCAX optimize


?SECTION map_source_to_guardian180 MACRO
== ------------------------------------------------------------------
== Map each src subdirectory in the OSS repository to a Guardian
== intermediate subvolume to hold C-format source files (code 180).
== I could have gone for a simpler way to define these settings, e.g.
== [#DEF :gstalsrc TEXT |BODY|$STAT.GSTALSRC]
== , but I wanted to make it clear that the value must be a SUBVOL.
== ------------------------------------------------------------------

[#DEF :gstalsrc STRUCT
  BEGIN
    SUBVOL sv180 VALUE $STAT.GS180TAL;
  END;
]

[#DEF :gstacl STRUCT
  BEGIN
    SUBVOL sv180 VALUE $STAT.GS180TAC;
  END;
]


?SECTION map_guardian180_to_guardian101 MACRO
== ------------------------------------------------------------------
== Map each subvolume of C-format source files (code 180) to a
== subvolume of EDIT-format source files (code 101)
== ------------------------------------------------------------------

== ****TODO AWK should make a pattern Make rule for each, e.g.
== /G/stat/gstalsrc/%: /G/stat/gs180tal/%
==	gtacl -p CTOEDIT '$(call guardian($<)), $(call guardian($@))'

[#DEF :gstalsrc STRUCT
  BEGIN
    SUBVOL sv180 VALUE $STAT.GS180TAL;
    SUBVOL sv101 VALUE $STAT.GSTALSRC;
  END;
]

[#DEF :gstacl STRUCT
  BEGIN
    SUBVOL sv180 VALUE $STAT.GS180TAC;
    SUBVOL sv180 VALUE $STAT.GSTACL;
  END;
]


?SECTION define_targets MACRO
== ------------------------------------------------------------------
== Comments go here
== ------------------------------------------------------------------

== ****TODO AWK should make a Make rule for each, e.g.
== /G/stat/gstalobjhello: /G/stat/gstalsrc/hello /G/system/system/tal%
==	echo 'Building @@; logging to $(whatevs_log)'
==	gtacl -c '$(call tacl($whatevs_command))'

[#DEF :gs100obj_hello STRUCT
  BEGIN
    FNAME name VALUE $STAT.GS.100OBJ.HELLO;
    FNAME log  VALUE $S.#GS100OBJ.HELLO
    STRUCT dependency;
      BEGIN
        CHAR(0:30) data VALUE ":gs100obj_hello_dependency";
      END;
    STRUCT recipe;
      BEGIN
        CHAR(0:30) data VALUE ":gs100obj_hello_recipe";
      END;
  END;
]


[#DEF :gs100exe_hello STRUCT
  BEGIN
    FNAME name VALUE $STAT.GS.100EXE.HELLO;
    FNAME log  VALUE $S.#GS100OBJ.HELLO
    STRUCT dependency;
      BEGIN
        CHAR(0:30) data VALUE ":gs100exe_hello_dependency"; == will this work? we need to teach AWK to expand a TACL variable!
      END;
    STRUCT recipe;
      BEGIN
        CHAR(0:30) data VALUE ":gs100exe_hello_recipe";
      END;
  END;
]


?SECTION define_resources MACRO
== ------------------------------------------------------------------
== Compilers, linkers, libraries, etc
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

[#DEF :system STRUCT == system disk
  BEGIN
    STRUCT system;
      BEGIN
        FNAME ctoedit  VALUE $SYSTEM.SYSTEM.CTOEDIT;
        FNAME extdecs1 VALUE $SYSTEM.SYSTEM.EXTDECS1;
        FNAME ocax     VALUE $SYSTEM.SYSTEM.OCAX;
        FNAME tal      VALUE $SYSTEM.SYSTEM.TAL;
      END;
    STRUCT zsysdefs;
      BEGIN
        FNAME zsystal  VALUE $SYSTEM.ZSYSDEFS.ZSYSTAL;
      END;
  END;
]


?SECTION define_defines MACRO
== ------------------------------------------------------------------
== Comments go here
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

DELETE DEFINE =EXTDECS1
ADD DEFINE    =EXTDECS1, CLASS MAP, FILE [:system:system:extdecs1]
DELETE DEFINE =ZSYSTAL
ADD DEFINE    =ZSYSTAL, CLASS MAP, FILE [:system:zsysdefs:zsystal]


?SECTION define_assigns MACRO
== ------------------------------------------------------------------
== Reserved for future use
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

ASSIGN WHATEVS, [:repo:gstalsrc:hello]


?SECTION define_params MACRO
== ------------------------------------------------------------------
== Reserved for future use
== AWK doesn't need to read this section.
== ------------------------------------------------------------------

PARAM SUMMAT [:flags:true]


?SECTION define_gs100obj_hello_rule MACRO
== ------------------------------------------------------------------
== Comments go here
== ------------------------------------------------------------------

== ****TODO AWK must read the dependency string, and use it in the
== rule created from the targets info.
[#DEF :gs100obj_hello_dependency TEXT |BODY|
  $(gs100obj_hello): $(gstalsrc_hello)
  $(system_system_tal)
]

[#DEF :gs100obj_hello_recipe MACRO |BODY|
  RUN [:system:system:tal]/IN [:gstalsrc_hello:name], &
    OUT [:gs100obj_hello:name], TERM $ZHOME/ &
    [gs100obj_hello:name]; [:tal_directives]
]


?SECTION define_gs100exe_hello_rule MACRO
== ------------------------------------------------------------------
== Comments go here
== ------------------------------------------------------------------

[#DEF :gs100exe_hello_dependency TEXT |BODY|
  $(gs100exe_hello): $(gs100obj_hello)
  $(system_system_ocax)
]

[#DEF :gs100exe_hello_recipe MACRO |BODY|
  RUN [:system:system:ocax]/OUT [:gs100exe_hello:log], &
    TERM $ZHOME/ [:gs100obj_hello:name] &
    output_file [:gs100exe_hello:name]
]


== ------------------------------------------------------------------
== EOF
== ------------------------------------------------------------------

